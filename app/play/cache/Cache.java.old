package play.cache;

import java.io.NotSerializableException;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Map;

import play.Logger;
import play.Play;
import play.exceptions.CacheException;
import play.libs.Time;

/**
 * The Cache. Mainly an interface to memcached.
 */
public abstract class Cache {

	/**
	 * The underlying cache implementation
	 */
	public static CacheImpl cacheImpl;

	/**
	 * Add an element only if it doesn't exist.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 * @param expiration
	 *            Ex: 10s, 3mn, 8h
	 */
	public static void add(String key, Object value, String expiration) {
		checkSerializable(value);
		Cache.cacheImpl.add(key, value, Time.parseDuration(expiration));
	}

	/**
	 * Add an element only if it doesn't exist, and return only when the element
	 * is effectively cached.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 * @param expiration
	 *            Ex: 10s, 3mn, 8h
	 * @return If the element an eventually been cached
	 */
	public static boolean safeAdd(String key, Object value, String expiration) {
		checkSerializable(value);
		return Cache.cacheImpl.safeAdd(key, value, Time.parseDuration(expiration));
	}

	/**
	 * Add an element only if it doesn't exist and store it indefinitely.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 */
	public static void add(String key, Object value) {
		checkSerializable(value);
		Cache.cacheImpl.add(key, value, Time.parseDuration(null));
	}

	/**
	 * Set an element.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 * @param expiration
	 *            Ex: 10s, 3mn, 8h
	 */
	public static void set(String key, Object value, String expiration) {
		checkSerializable(value);
		Cache.cacheImpl.set(key, value, Time.parseDuration(expiration));
	}

	/**
	 * Set an element and return only when the element is effectively cached.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 * @param expiration
	 *            Ex: 10s, 3mn, 8h
	 * @return If the element an eventually been cached
	 */
	public static boolean safeSet(String key, Object value, String expiration) {
		checkSerializable(value);
		return Cache.cacheImpl.safeSet(key, value, Time.parseDuration(expiration));
	}

	/**
	 * Set an element and store it indefinitely.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 */
	public static void set(String key, Object value) {
		checkSerializable(value);
		Cache.cacheImpl.set(key, value, Time.parseDuration(null));
	}

	/**
	 * Replace an element only if it already exists.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 * @param expiration
	 *            Ex: 10s, 3mn, 8h
	 */
	public static void replace(String key, Object value, String expiration) {
		checkSerializable(value);
		Cache.cacheImpl.replace(key, value, Time.parseDuration(expiration));
	}

	/**
	 * Replace an element only if it already exists and return only when the
	 * element is effectively cached.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 * @param expiration
	 *            Ex: 10s, 3mn, 8h
	 * @return If the element an eventually been cached
	 */
	public static boolean safeReplace(String key, Object value, String expiration) {
		checkSerializable(value);
		return Cache.cacheImpl.safeReplace(key, value, Time.parseDuration(expiration));
	}

	/**
	 * Replace an element only if it already exists and store it indefinitely.
	 * 
	 * @param key
	 *            Element key
	 * @param value
	 *            Element value
	 */
	public static void replace(String key, Object value) {
		checkSerializable(value);
		Cache.cacheImpl.replace(key, value, Time.parseDuration(null));
	}

	/**
	 * Increment the element value (must be a Number).
	 * 
	 * @param key
	 *            Element key
	 * @param by
	 *            The incr value
	 * @return The new value
	 */
	public static long incr(String key, int by) {
		return Cache.cacheImpl.incr(key, by);
	}

	/**
	 * Increment the element value (must be a Number) by 1.
	 * 
	 * @param key
	 *            Element key
	 * @return The new value
	 */
	public static long incr(String key) {
		return Cache.cacheImpl.incr(key, 1);
	}

	/**
	 * Decrement the element value (must be a Number).
	 * 
	 * @param key
	 *            Element key
	 * @param by
	 *            The decr value
	 * @return The new value
	 */
	public static long decr(String key, int by) {
		return Cache.cacheImpl.decr(key, by);
	}

	/**
	 * Decrement the element value (must be a Number) by 1.
	 * 
	 * @param key
	 *            Element key
	 * @return The new value
	 */
	public static long decr(String key) {
		return Cache.cacheImpl.decr(key, 1);
	}

	/**
	 * Retrieve an object.
	 * 
	 * @param key
	 *            The element key
	 * @return The element value or null
	 */
	public static Object get(String key) {
		return Cache.cacheImpl.get(key);
	}

	/**
	 * Bulk retrieve.
	 * 
	 * @param key
	 *            List of keys
	 * @return Map of keys & values
	 */
	public static Map<String, Object> get(String... key) {
		return Cache.cacheImpl.get(key);
	}

	/**
	 * Delete an element from the cache.
	 * 
	 * @param key
	 *            The element key *
	 */
	public static void delete(String key) {
		Cache.cacheImpl.delete(key);
	}

	/**
	 * Delete an element from the cache and return only when the element is
	 * effectively removed.
	 * 
	 * @param key
	 *            The element key
	 * @return If the element an eventually been deleted
	 */
	public static boolean safeDelete(String key) {
		return Cache.cacheImpl.safeDelete(key);
	}

	/**
	 * Clear all data from cache.
	 */
	public static void clear() {
		Cache.cacheImpl.clear();
	}

	/**
	 * Convenient clazz to get a value a class type;
	 * 
	 * @param <T>
	 *            The needed type
	 * @param key
	 *            The element key
	 * @param clazz
	 *            The type class
	 * @return The element value or null
	 */
	@SuppressWarnings("unchecked")
	public static <T> T get(String key, Class<T> clazz) {
		return (T) Cache.cacheImpl.get(key);
	}

	/**
	 * Initialize the cache system.
	 */
	public static void init() {

		String impl = Play.configuration.getProperty("cache.class", "play.cache.EhCacheImpl");

		Logger.info("Loading %s", impl);
		Class c = null;
		try {
			c = Play.classloader.loadClass(impl);
			Logger.info("Loaded: %s", c);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		Method m = null;
		try {
			m = c.getMethod("getInstance", new Class[]{});
			Logger.info("Method: %s", m.getName());
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		}
		Object o = null;
		try {
			m.setAccessible(true);
			o = m.invoke(null, new Object[]{});
			Logger.info("Object: %s", o);
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
		if(o != null){
			Cache.cacheImpl = (CacheImpl) o;
		}else{
			Cache.cacheImpl = EhCacheImpl.getInstance();
		}

		Logger.info("CacheImpl: %s", Cache.cacheImpl);
	}

	/**
	 * Stop the cache system.
	 */
	public static void stop() {
		Cache.cacheImpl.stop();
	}

	/**
	 * Utility that check that an object is serializable.
	 */
	static void checkSerializable(Object value) {
		if (value != null && !(value instanceof Serializable)) {
			throw new CacheException("Cannot cache a non-serializable value of type " + value.getClass().getName(), new NotSerializableException(value.getClass().getName()));
		}
	}

}
